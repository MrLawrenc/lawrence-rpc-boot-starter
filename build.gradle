plugins {
    id 'groovy'
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'org.springframework.boot' version '2.3.0.RELEASE'
}

group 'com.github.lawrence'
version '1.0-SNAPSHOT'

apply from: 'version.gradle'
apply plugin: 'org.springframework.boot'
repositories {
    //先从本地仓库找 可以配置环境变量GRADLE_USER_HOME 配置为本地仓库地址  或者指向maven本地仓库即可
    mavenLocal()
    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
}


dependencies {

    implementation 'org.codehaus.groovy:groovy-all:3.0.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    implementation 'org.codehaus.groovy:groovy-all:2.3.3'

    implementation rootProject.ext.dependence.nacos_client
    implementation rootProject.ext.dependence.log4j
    implementation rootProject.ext.dependence.slf4j_api
    implementation rootProject.ext.dependence.logback
    implementation rootProject.ext.dependence.fastjson
    implementation rootProject.ext.dependence.io_netty

    annotationProcessor rootProject.ext.dependence.lombok
    compileOnly rootProject.ext.dependence.lombok
    testAnnotationProcessor rootProject.ext.dependence.lombok
    testCompileOnly rootProject.ext.dependence.lombok

    implementation 'org.springframework.boot:spring-boot-starter:2.3.0.RELEASE'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.3.0.RELEASE"
}

test {
    useJUnitPlatform()
}

///cmd的 /C 执行字符串指定的命令然后终止
//安装到本地仓库
task mvnInstallLocal {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            workingDir "./"
            executable = 'cmd'
            args "mvn help:evaluate -Dexpression=settings.localRepository"
//            args "mvn -v"
            standardOutput = os
        }
        ext.hostname = os.toString()
    }
    doLast {
        println "=================="
        println hostname
        println "=================="
        String r = hostname
        String[] lines = r.split(System.lineSeparator())
        String local = Arrays.asList(lines).find {
            !it.startsWith("[INFO]")
        }
        println local
    }
}

//通过doLast获取返回值
task setHostnameProperty {
    def cmd = "gradle -v"
    ["cmd", "/c", cmd].execute()

//    new ByteArrayOutputStream().withStream { os ->
//        def result = exec {
//            executable = 'cmd'
//            args " /c gradle -v"
//            standardOutput = os
//        }
//        ext.hostname = os.toString()
//        ext.result = result
//    }
//    doLast {
//        println ext
//        println hostname
//        println result
//    }
}
// 执行cmd命令
task execCmd2(type: Exec, description: 'just for test bat  task') {
    String cmd = """
                    mvn install:install-file -Dfile=D:/taobao-sdk-java-auto-20160607.jar -DgroupId=com.ganshane.specs -DartifactId=taobao-sdk-java-auto-20160607 -Dversion=1.0.0 -Dpackaging=jar
                """
    workingDir './'
    ByteArrayOutputStream out = new ByteArrayOutputStream()
    def commands = []
    if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
        commands << 'cmd'
        commands << '/c'
    } else {
        commands << 'bash'
        commands << '-c'
    }
    setStandardOutput(out)
    commands.add("gradle -v")

    commandLine(commands)


    doLast {
        println '================================'
        println out.toString()
        println '================================'
    }
}


